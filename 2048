#!/usr/bin/env bash

color() {
    c=

    for a in 4{0..5} 10{0..5}; do
        ((c == $1)) && # get corresponding color
            printf "%b%4s%b" "\\e[${a}m" "$1" "\\e[0m"

        ((c = c ? c * 2 : 2))
    done
}

new() {
    ((x = RANDOM % 4, y = RANDOM % 4))

    # generate a brand new cell
    while ((g[$x $y])); do
        ((x = RANDOM % 4, y = RANDOM % 4))
    done

    g[$x $y]=2
}

check() {
    c=

    for i in {0..3}\ {0..3}; do
        ((g[$i] && c++, g[$i] == 2048)) && exit
    done

    ((c == 16)) && exit
}

display() {
    # print in place
    printf "\\e[H"

    for i in {0..3}\ {0..3}; do
        color "${g[$i]}"
        ((${i#?} == 3)) && printf "\\n"
    done
}

template() {
    case $1 in
        h) a='0..3'; b='k = j + 1; k < 4; k++';  c='$i $j'; d='$i $k';;
        j) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$j $i'; d='$k $i';;
        k) a='0..3'; b='k = j + 1; k < 4; k++';  c='$j $i'; d='$k $i';;
        l) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$i $j'; d='$i $k';;
    esac

    eval "
        push_$1() {
            for i in {0..3}; do
                for j in {$a}; do
                    for (($b)) do
                        ((g[$c] == g[$d])) && { ((g[$c] += g[$d], g[$d] = 0)); break; }
                        ((g[$d])) && break
                    done
                done
                for j in {$a}; do
                    ((! g[$c])) &&
                        for (($b)) do
                            ((g[$d])) && { ((g[$c] = g[$d], g[$d] = 0)); break; }
                        done
                done
            done
        }"
}

printf "\\e[2J"

declare -A g t

# fill the array
for i in {0..3}\ {0..3}; do
    ((g[$i] = 0))
done

# create functions
for key in h j k l; do
    template "$key"
done

new

while display; read -rsn 1 key; do
    # save current state
    for i in "${!g[@]}"; do
        t[$i]=${g[$i]}
    done

    case $key in
        [hjkl]) "push_$key"; check
    esac

    # compare with new state
    for i in "${!g[@]}"; do
        ((t[$i] != g[$i])) && { new; break; }
    done
done
