#!/usr/bin/env bash

# ---
# functions
# ---

color() {
    c=

    for a in 4{0..5} 10{0..5}; do
        ((c == $1)) && # get corresponding color
            printf "%b%4s%b" "\\e[${a}m" "$1" "\\e[0m"

        ((c = c ? c * 2 : 2))
    done
}

new() {
    ((x = RANDOM % 4, y = RANDOM % 4))

    # generate a brand new cell
    while ((g[$x $y])); do
        ((x = RANDOM % 4, y = RANDOM % 4))
    done

    g[$x $y]=2
}

check() {
    c=

    for i in {0..3}\ {0..3}; do
        ((g[$i] && c++, g[$i] == 2048)) && exit
    done

    ((c == 16)) && exit
}

display() {
    # print in place
    printf "\\e[H"

    for i in {0..3}\ {0..3}; do
        color "${g[$i]}"
        ((${i#?} == 3)) && printf "\\n"
    done
}

push() {
    for i in {0..3}; do
        if [[ $1 =~ h|k ]]; then
            for j in {0..3}; do
                for ((k = j + 1; k < 4; k++)) do
                    [[ $1 == h ]] && { a="$i $j"; b="$i $k"; } || { a="$j $i"; b="$k $i"; }
                    ((g[$a] == g[$b])) && { ((g[$a] += g[$b], g[$b] = 0)); break; }
                    ((g[$b])) && break
                done
            done
            for j in {0..3}; do
                [[ $1 == h ]] && a="$i $j" || a="$j $i"
                ((! g[$a])) &&
                    for ((k = j + 1; k < 4; k++)) do
                        [[ $1 == h ]] && b="$i $k" || b="$k $i"
                        ((g[$b])) && { ((g[$a] = g[$b], g[$b] = 0)); break; }
                    done
            done
        elif [[ $1 =~ l|j ]]; then
            for j in {3..0}; do
                for ((k = j - 1; k >= 0; k--)) do
                    [[ $1 == l ]] && { a="$i $j"; b="$i $k"; } || { a="$j $i"; b="$k $i"; }
                    ((g[$a] == g[$b])) && { ((g[$a] += g[$b], g[$b] = 0)); break; }
                    ((g[$b])) && break
                done
            done
            for j in {3..0}; do
                [[ $1 == l ]] && a="$i $j" || a="$j $i"
                ((! g[$a])) &&
                    for ((k = j - 1; k >= 0; k--)) do
                        [[ $1 == l ]] && b="$i $k" || b="$k $i"
                        ((g[$b])) && { ((g[$a] = g[$b], g[$b] = 0)); break; }
                    done
            done
        fi
    done
}

# ---
# init
# ---

printf "\\e[2J"

declare -A g t

# fill the array
for i in {0..3}\ {0..3}; do
    ((g[$i] = 0))
done

new

# ---
# main
# ---

while display; read -rsn 1 key; do
    [[ $key == q ]] && exit

    # save current state
    for i in "${!g[@]}"; do
        t[$i]=${g[$i]}
    done

    push "$key"

    check

    # compare with new state
    for i in "${!g[@]}"; do
        ((t[$i] != g[$i])) && { new; break; }
    done
done
